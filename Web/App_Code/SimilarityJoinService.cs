/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class SimilarityJoinService {
  public interface Iface {
    List<string> QueryDataByID(List<int> UserIDs);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDataByID(AsyncCallback callback, object state, List<int> UserIDs);
    List<string> End_QueryDataByID(IAsyncResult asyncResult);
    #endif
    List<string> QueryTypeByID(List<int> UserIDs);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryTypeByID(AsyncCallback callback, object state, List<int> UserIDs);
    List<string> End_QueryTypeByID(IAsyncResult asyncResult);
    #endif
    List<int> QueryDistributedByID(List<int> UserIDs);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryDistributedByID(AsyncCallback callback, object state, List<int> UserIDs);
    List<int> End_QueryDistributedByID(IAsyncResult asyncResult);
    #endif
    List<string> QueryTypeByData(List<string> Datas);
    #if SILVERLIGHT
    IAsyncResult Begin_QueryTypeByData(AsyncCallback callback, object state, List<string> Datas);
    List<string> End_QueryTypeByData(IAsyncResult asyncResult);
    #endif
    List<int> GetIndexDistributed();
    #if SILVERLIGHT
    IAsyncResult Begin_GetIndexDistributed(AsyncCallback callback, object state);
    List<int> End_GetIndexDistributed(IAsyncResult asyncResult);
    #endif
    List<string> GetIndexMetaData();
    #if SILVERLIGHT
    IAsyncResult Begin_GetIndexMetaData(AsyncCallback callback, object state);
    List<string> End_GetIndexMetaData(IAsyncResult asyncResult);
    #endif
    List<string> GetLatestQueryTime();
    #if SILVERLIGHT
    IAsyncResult Begin_GetLatestQueryTime(AsyncCallback callback, object state);
    List<string> End_GetLatestQueryTime(IAsyncResult asyncResult);
    #endif
    List<int> JoinByStrategy1(List<string> Datas, int ThresholdK, int TimeOut);
    #if SILVERLIGHT
    IAsyncResult Begin_JoinByStrategy1(AsyncCallback callback, object state, List<string> Datas, int ThresholdK, int TimeOut);
    List<int> End_JoinByStrategy1(IAsyncResult asyncResult);
    #endif
    List<int> JoinByStrategy2(List<string> Datas, int ThresholdK, int TimeOut);
    #if SILVERLIGHT
    IAsyncResult Begin_JoinByStrategy2(AsyncCallback callback, object state, List<string> Datas, int ThresholdK, int TimeOut);
    List<int> End_JoinByStrategy2(IAsyncResult asyncResult);
    #endif
    List<int> JoinByStrategy3(List<string> Datas, int ThresholdK, int TimeOut, double SelfQueryR);
    #if SILVERLIGHT
    IAsyncResult Begin_JoinByStrategy3(AsyncCallback callback, object state, List<string> Datas, int ThresholdK, int TimeOut, double SelfQueryR);
    List<int> End_JoinByStrategy3(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDataByID(AsyncCallback callback, object state, List<int> UserIDs)
    {
      return send_QueryDataByID(callback, state, UserIDs);
    }

    public List<string> End_QueryDataByID(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDataByID();
    }

    #endif

    public List<string> QueryDataByID(List<int> UserIDs)
    {
      #if !SILVERLIGHT
      send_QueryDataByID(UserIDs);
      return recv_QueryDataByID();

      #else
      var asyncResult = Begin_QueryDataByID(null, null, UserIDs);
      return End_QueryDataByID(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDataByID(AsyncCallback callback, object state, List<int> UserIDs)
    #else
    public void send_QueryDataByID(List<int> UserIDs)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDataByID", TMessageType.Call, seqid_));
      QueryDataByID_args args = new QueryDataByID_args();
      args.UserIDs = UserIDs;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_QueryDataByID()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDataByID_result result = new QueryDataByID_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDataByID failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryTypeByID(AsyncCallback callback, object state, List<int> UserIDs)
    {
      return send_QueryTypeByID(callback, state, UserIDs);
    }

    public List<string> End_QueryTypeByID(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryTypeByID();
    }

    #endif

    public List<string> QueryTypeByID(List<int> UserIDs)
    {
      #if !SILVERLIGHT
      send_QueryTypeByID(UserIDs);
      return recv_QueryTypeByID();

      #else
      var asyncResult = Begin_QueryTypeByID(null, null, UserIDs);
      return End_QueryTypeByID(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryTypeByID(AsyncCallback callback, object state, List<int> UserIDs)
    #else
    public void send_QueryTypeByID(List<int> UserIDs)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryTypeByID", TMessageType.Call, seqid_));
      QueryTypeByID_args args = new QueryTypeByID_args();
      args.UserIDs = UserIDs;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_QueryTypeByID()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryTypeByID_result result = new QueryTypeByID_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryTypeByID failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryDistributedByID(AsyncCallback callback, object state, List<int> UserIDs)
    {
      return send_QueryDistributedByID(callback, state, UserIDs);
    }

    public List<int> End_QueryDistributedByID(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryDistributedByID();
    }

    #endif

    public List<int> QueryDistributedByID(List<int> UserIDs)
    {
      #if !SILVERLIGHT
      send_QueryDistributedByID(UserIDs);
      return recv_QueryDistributedByID();

      #else
      var asyncResult = Begin_QueryDistributedByID(null, null, UserIDs);
      return End_QueryDistributedByID(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryDistributedByID(AsyncCallback callback, object state, List<int> UserIDs)
    #else
    public void send_QueryDistributedByID(List<int> UserIDs)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryDistributedByID", TMessageType.Call, seqid_));
      QueryDistributedByID_args args = new QueryDistributedByID_args();
      args.UserIDs = UserIDs;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<int> recv_QueryDistributedByID()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryDistributedByID_result result = new QueryDistributedByID_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryDistributedByID failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_QueryTypeByData(AsyncCallback callback, object state, List<string> Datas)
    {
      return send_QueryTypeByData(callback, state, Datas);
    }

    public List<string> End_QueryTypeByData(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_QueryTypeByData();
    }

    #endif

    public List<string> QueryTypeByData(List<string> Datas)
    {
      #if !SILVERLIGHT
      send_QueryTypeByData(Datas);
      return recv_QueryTypeByData();

      #else
      var asyncResult = Begin_QueryTypeByData(null, null, Datas);
      return End_QueryTypeByData(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_QueryTypeByData(AsyncCallback callback, object state, List<string> Datas)
    #else
    public void send_QueryTypeByData(List<string> Datas)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("QueryTypeByData", TMessageType.Call, seqid_));
      QueryTypeByData_args args = new QueryTypeByData_args();
      args.Datas = Datas;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_QueryTypeByData()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      QueryTypeByData_result result = new QueryTypeByData_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QueryTypeByData failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetIndexDistributed(AsyncCallback callback, object state)
    {
      return send_GetIndexDistributed(callback, state);
    }

    public List<int> End_GetIndexDistributed(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetIndexDistributed();
    }

    #endif

    public List<int> GetIndexDistributed()
    {
      #if !SILVERLIGHT
      send_GetIndexDistributed();
      return recv_GetIndexDistributed();

      #else
      var asyncResult = Begin_GetIndexDistributed(null, null);
      return End_GetIndexDistributed(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetIndexDistributed(AsyncCallback callback, object state)
    #else
    public void send_GetIndexDistributed()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetIndexDistributed", TMessageType.Call, seqid_));
      GetIndexDistributed_args args = new GetIndexDistributed_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<int> recv_GetIndexDistributed()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetIndexDistributed_result result = new GetIndexDistributed_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetIndexDistributed failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetIndexMetaData(AsyncCallback callback, object state)
    {
      return send_GetIndexMetaData(callback, state);
    }

    public List<string> End_GetIndexMetaData(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetIndexMetaData();
    }

    #endif

    public List<string> GetIndexMetaData()
    {
      #if !SILVERLIGHT
      send_GetIndexMetaData();
      return recv_GetIndexMetaData();

      #else
      var asyncResult = Begin_GetIndexMetaData(null, null);
      return End_GetIndexMetaData(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetIndexMetaData(AsyncCallback callback, object state)
    #else
    public void send_GetIndexMetaData()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetIndexMetaData", TMessageType.Call, seqid_));
      GetIndexMetaData_args args = new GetIndexMetaData_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_GetIndexMetaData()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetIndexMetaData_result result = new GetIndexMetaData_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetIndexMetaData failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_GetLatestQueryTime(AsyncCallback callback, object state)
    {
      return send_GetLatestQueryTime(callback, state);
    }

    public List<string> End_GetLatestQueryTime(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_GetLatestQueryTime();
    }

    #endif

    public List<string> GetLatestQueryTime()
    {
      #if !SILVERLIGHT
      send_GetLatestQueryTime();
      return recv_GetLatestQueryTime();

      #else
      var asyncResult = Begin_GetLatestQueryTime(null, null);
      return End_GetLatestQueryTime(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_GetLatestQueryTime(AsyncCallback callback, object state)
    #else
    public void send_GetLatestQueryTime()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("GetLatestQueryTime", TMessageType.Call, seqid_));
      GetLatestQueryTime_args args = new GetLatestQueryTime_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_GetLatestQueryTime()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      GetLatestQueryTime_result result = new GetLatestQueryTime_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLatestQueryTime failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_JoinByStrategy1(AsyncCallback callback, object state, List<string> Datas, int ThresholdK, int TimeOut)
    {
      return send_JoinByStrategy1(callback, state, Datas, ThresholdK, TimeOut);
    }

    public List<int> End_JoinByStrategy1(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_JoinByStrategy1();
    }

    #endif

    public List<int> JoinByStrategy1(List<string> Datas, int ThresholdK, int TimeOut)
    {
      #if !SILVERLIGHT
      send_JoinByStrategy1(Datas, ThresholdK, TimeOut);
      return recv_JoinByStrategy1();

      #else
      var asyncResult = Begin_JoinByStrategy1(null, null, Datas, ThresholdK, TimeOut);
      return End_JoinByStrategy1(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_JoinByStrategy1(AsyncCallback callback, object state, List<string> Datas, int ThresholdK, int TimeOut)
    #else
    public void send_JoinByStrategy1(List<string> Datas, int ThresholdK, int TimeOut)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("JoinByStrategy1", TMessageType.Call, seqid_));
      JoinByStrategy1_args args = new JoinByStrategy1_args();
      args.Datas = Datas;
      args.ThresholdK = ThresholdK;
      args.TimeOut = TimeOut;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<int> recv_JoinByStrategy1()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      JoinByStrategy1_result result = new JoinByStrategy1_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "JoinByStrategy1 failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_JoinByStrategy2(AsyncCallback callback, object state, List<string> Datas, int ThresholdK, int TimeOut)
    {
      return send_JoinByStrategy2(callback, state, Datas, ThresholdK, TimeOut);
    }

    public List<int> End_JoinByStrategy2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_JoinByStrategy2();
    }

    #endif

    public List<int> JoinByStrategy2(List<string> Datas, int ThresholdK, int TimeOut)
    {
      #if !SILVERLIGHT
      send_JoinByStrategy2(Datas, ThresholdK, TimeOut);
      return recv_JoinByStrategy2();

      #else
      var asyncResult = Begin_JoinByStrategy2(null, null, Datas, ThresholdK, TimeOut);
      return End_JoinByStrategy2(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_JoinByStrategy2(AsyncCallback callback, object state, List<string> Datas, int ThresholdK, int TimeOut)
    #else
    public void send_JoinByStrategy2(List<string> Datas, int ThresholdK, int TimeOut)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("JoinByStrategy2", TMessageType.Call, seqid_));
      JoinByStrategy2_args args = new JoinByStrategy2_args();
      args.Datas = Datas;
      args.ThresholdK = ThresholdK;
      args.TimeOut = TimeOut;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<int> recv_JoinByStrategy2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      JoinByStrategy2_result result = new JoinByStrategy2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "JoinByStrategy2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_JoinByStrategy3(AsyncCallback callback, object state, List<string> Datas, int ThresholdK, int TimeOut, double SelfQueryR)
    {
      return send_JoinByStrategy3(callback, state, Datas, ThresholdK, TimeOut, SelfQueryR);
    }

    public List<int> End_JoinByStrategy3(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_JoinByStrategy3();
    }

    #endif

    public List<int> JoinByStrategy3(List<string> Datas, int ThresholdK, int TimeOut, double SelfQueryR)
    {
      #if !SILVERLIGHT
      send_JoinByStrategy3(Datas, ThresholdK, TimeOut, SelfQueryR);
      return recv_JoinByStrategy3();

      #else
      var asyncResult = Begin_JoinByStrategy3(null, null, Datas, ThresholdK, TimeOut, SelfQueryR);
      return End_JoinByStrategy3(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_JoinByStrategy3(AsyncCallback callback, object state, List<string> Datas, int ThresholdK, int TimeOut, double SelfQueryR)
    #else
    public void send_JoinByStrategy3(List<string> Datas, int ThresholdK, int TimeOut, double SelfQueryR)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("JoinByStrategy3", TMessageType.Call, seqid_));
      JoinByStrategy3_args args = new JoinByStrategy3_args();
      args.Datas = Datas;
      args.ThresholdK = ThresholdK;
      args.TimeOut = TimeOut;
      args.SelfQueryR = SelfQueryR;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<int> recv_JoinByStrategy3()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      JoinByStrategy3_result result = new JoinByStrategy3_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "JoinByStrategy3 failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["QueryDataByID"] = QueryDataByID_Process;
      processMap_["QueryTypeByID"] = QueryTypeByID_Process;
      processMap_["QueryDistributedByID"] = QueryDistributedByID_Process;
      processMap_["QueryTypeByData"] = QueryTypeByData_Process;
      processMap_["GetIndexDistributed"] = GetIndexDistributed_Process;
      processMap_["GetIndexMetaData"] = GetIndexMetaData_Process;
      processMap_["GetLatestQueryTime"] = GetLatestQueryTime_Process;
      processMap_["JoinByStrategy1"] = JoinByStrategy1_Process;
      processMap_["JoinByStrategy2"] = JoinByStrategy2_Process;
      processMap_["JoinByStrategy3"] = JoinByStrategy3_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void QueryDataByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDataByID_args args = new QueryDataByID_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDataByID_result result = new QueryDataByID_result();
      result.Success = iface_.QueryDataByID(args.UserIDs);
      oprot.WriteMessageBegin(new TMessage("QueryDataByID", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryTypeByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryTypeByID_args args = new QueryTypeByID_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryTypeByID_result result = new QueryTypeByID_result();
      result.Success = iface_.QueryTypeByID(args.UserIDs);
      oprot.WriteMessageBegin(new TMessage("QueryTypeByID", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryDistributedByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryDistributedByID_args args = new QueryDistributedByID_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryDistributedByID_result result = new QueryDistributedByID_result();
      result.Success = iface_.QueryDistributedByID(args.UserIDs);
      oprot.WriteMessageBegin(new TMessage("QueryDistributedByID", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void QueryTypeByData_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      QueryTypeByData_args args = new QueryTypeByData_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      QueryTypeByData_result result = new QueryTypeByData_result();
      result.Success = iface_.QueryTypeByData(args.Datas);
      oprot.WriteMessageBegin(new TMessage("QueryTypeByData", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetIndexDistributed_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetIndexDistributed_args args = new GetIndexDistributed_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetIndexDistributed_result result = new GetIndexDistributed_result();
      result.Success = iface_.GetIndexDistributed();
      oprot.WriteMessageBegin(new TMessage("GetIndexDistributed", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetIndexMetaData_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetIndexMetaData_args args = new GetIndexMetaData_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetIndexMetaData_result result = new GetIndexMetaData_result();
      result.Success = iface_.GetIndexMetaData();
      oprot.WriteMessageBegin(new TMessage("GetIndexMetaData", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void GetLatestQueryTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      GetLatestQueryTime_args args = new GetLatestQueryTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      GetLatestQueryTime_result result = new GetLatestQueryTime_result();
      result.Success = iface_.GetLatestQueryTime();
      oprot.WriteMessageBegin(new TMessage("GetLatestQueryTime", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void JoinByStrategy1_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      JoinByStrategy1_args args = new JoinByStrategy1_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      JoinByStrategy1_result result = new JoinByStrategy1_result();
      result.Success = iface_.JoinByStrategy1(args.Datas, args.ThresholdK, args.TimeOut);
      oprot.WriteMessageBegin(new TMessage("JoinByStrategy1", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void JoinByStrategy2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      JoinByStrategy2_args args = new JoinByStrategy2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      JoinByStrategy2_result result = new JoinByStrategy2_result();
      result.Success = iface_.JoinByStrategy2(args.Datas, args.ThresholdK, args.TimeOut);
      oprot.WriteMessageBegin(new TMessage("JoinByStrategy2", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void JoinByStrategy3_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      JoinByStrategy3_args args = new JoinByStrategy3_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      JoinByStrategy3_result result = new JoinByStrategy3_result();
      result.Success = iface_.JoinByStrategy3(args.Datas, args.ThresholdK, args.TimeOut, args.SelfQueryR);
      oprot.WriteMessageBegin(new TMessage("JoinByStrategy3", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDataByID_args : TBase
  {
    private List<int> _UserIDs;

    public List<int> UserIDs
    {
      get
      {
        return _UserIDs;
      }
      set
      {
        __isset.UserIDs = true;
        this._UserIDs = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool UserIDs;
    }

    public QueryDataByID_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                UserIDs = new List<int>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.ReadI32();
                  UserIDs.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryDataByID_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UserIDs != null && __isset.UserIDs) {
        field.Name = "UserIDs";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, UserIDs.Count));
          foreach (int _iter3 in UserIDs)
          {
            oprot.WriteI32(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDataByID_args(");
      bool __first = true;
      if (UserIDs != null && __isset.UserIDs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserIDs: ");
        __sb.Append(UserIDs);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDataByID_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDataByID_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<string>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  string _elem6;
                  _elem6 = iprot.ReadString();
                  Success.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryDataByID_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter7 in Success)
            {
              oprot.WriteString(_iter7);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDataByID_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryTypeByID_args : TBase
  {
    private List<int> _UserIDs;

    public List<int> UserIDs
    {
      get
      {
        return _UserIDs;
      }
      set
      {
        __isset.UserIDs = true;
        this._UserIDs = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool UserIDs;
    }

    public QueryTypeByID_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                UserIDs = new List<int>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  int _elem10;
                  _elem10 = iprot.ReadI32();
                  UserIDs.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryTypeByID_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UserIDs != null && __isset.UserIDs) {
        field.Name = "UserIDs";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, UserIDs.Count));
          foreach (int _iter11 in UserIDs)
          {
            oprot.WriteI32(_iter11);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryTypeByID_args(");
      bool __first = true;
      if (UserIDs != null && __isset.UserIDs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserIDs: ");
        __sb.Append(UserIDs);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryTypeByID_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryTypeByID_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<string>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  string _elem14;
                  _elem14 = iprot.ReadString();
                  Success.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryTypeByID_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter15 in Success)
            {
              oprot.WriteString(_iter15);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryTypeByID_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDistributedByID_args : TBase
  {
    private List<int> _UserIDs;

    public List<int> UserIDs
    {
      get
      {
        return _UserIDs;
      }
      set
      {
        __isset.UserIDs = true;
        this._UserIDs = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool UserIDs;
    }

    public QueryDistributedByID_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                UserIDs = new List<int>();
                TList _list16 = iprot.ReadListBegin();
                for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                {
                  int _elem18;
                  _elem18 = iprot.ReadI32();
                  UserIDs.Add(_elem18);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryDistributedByID_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (UserIDs != null && __isset.UserIDs) {
        field.Name = "UserIDs";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, UserIDs.Count));
          foreach (int _iter19 in UserIDs)
          {
            oprot.WriteI32(_iter19);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDistributedByID_args(");
      bool __first = true;
      if (UserIDs != null && __isset.UserIDs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserIDs: ");
        __sb.Append(UserIDs);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryDistributedByID_result : TBase
  {
    private List<int> _success;

    public List<int> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryDistributedByID_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<int>();
                TList _list20 = iprot.ReadListBegin();
                for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  int _elem22;
                  _elem22 = iprot.ReadI32();
                  Success.Add(_elem22);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryDistributedByID_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter23 in Success)
            {
              oprot.WriteI32(_iter23);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryDistributedByID_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryTypeByData_args : TBase
  {
    private List<string> _Datas;

    public List<string> Datas
    {
      get
      {
        return _Datas;
      }
      set
      {
        __isset.Datas = true;
        this._Datas = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Datas;
    }

    public QueryTypeByData_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Datas = new List<string>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  string _elem26;
                  _elem26 = iprot.ReadString();
                  Datas.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryTypeByData_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Datas != null && __isset.Datas) {
        field.Name = "Datas";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Datas.Count));
          foreach (string _iter27 in Datas)
          {
            oprot.WriteString(_iter27);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryTypeByData_args(");
      bool __first = true;
      if (Datas != null && __isset.Datas) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Datas: ");
        __sb.Append(Datas);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryTypeByData_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public QueryTypeByData_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<string>();
                TList _list28 = iprot.ReadListBegin();
                for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                {
                  string _elem30;
                  _elem30 = iprot.ReadString();
                  Success.Add(_elem30);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryTypeByData_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter31 in Success)
            {
              oprot.WriteString(_iter31);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("QueryTypeByData_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetIndexDistributed_args : TBase
  {

    public GetIndexDistributed_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetIndexDistributed_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetIndexDistributed_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetIndexDistributed_result : TBase
  {
    private List<int> _success;

    public List<int> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetIndexDistributed_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<int>();
                TList _list32 = iprot.ReadListBegin();
                for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  int _elem34;
                  _elem34 = iprot.ReadI32();
                  Success.Add(_elem34);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetIndexDistributed_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter35 in Success)
            {
              oprot.WriteI32(_iter35);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetIndexDistributed_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetIndexMetaData_args : TBase
  {

    public GetIndexMetaData_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetIndexMetaData_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetIndexMetaData_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetIndexMetaData_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetIndexMetaData_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<string>();
                TList _list36 = iprot.ReadListBegin();
                for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                {
                  string _elem38;
                  _elem38 = iprot.ReadString();
                  Success.Add(_elem38);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetIndexMetaData_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter39 in Success)
            {
              oprot.WriteString(_iter39);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetIndexMetaData_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetLatestQueryTime_args : TBase
  {

    public GetLatestQueryTime_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetLatestQueryTime_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetLatestQueryTime_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GetLatestQueryTime_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public GetLatestQueryTime_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<string>();
                TList _list40 = iprot.ReadListBegin();
                for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                {
                  string _elem42;
                  _elem42 = iprot.ReadString();
                  Success.Add(_elem42);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GetLatestQueryTime_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Success.Count));
            foreach (string _iter43 in Success)
            {
              oprot.WriteString(_iter43);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("GetLatestQueryTime_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class JoinByStrategy1_args : TBase
  {
    private List<string> _Datas;
    private int _ThresholdK;
    private int _TimeOut;

    public List<string> Datas
    {
      get
      {
        return _Datas;
      }
      set
      {
        __isset.Datas = true;
        this._Datas = value;
      }
    }

    public int ThresholdK
    {
      get
      {
        return _ThresholdK;
      }
      set
      {
        __isset.ThresholdK = true;
        this._ThresholdK = value;
      }
    }

    public int TimeOut
    {
      get
      {
        return _TimeOut;
      }
      set
      {
        __isset.TimeOut = true;
        this._TimeOut = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Datas;
      public bool ThresholdK;
      public bool TimeOut;
    }

    public JoinByStrategy1_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Datas = new List<string>();
                TList _list44 = iprot.ReadListBegin();
                for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                {
                  string _elem46;
                  _elem46 = iprot.ReadString();
                  Datas.Add(_elem46);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ThresholdK = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TimeOut = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("JoinByStrategy1_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Datas != null && __isset.Datas) {
        field.Name = "Datas";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Datas.Count));
          foreach (string _iter47 in Datas)
          {
            oprot.WriteString(_iter47);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.ThresholdK) {
        field.Name = "ThresholdK";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ThresholdK);
        oprot.WriteFieldEnd();
      }
      if (__isset.TimeOut) {
        field.Name = "TimeOut";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TimeOut);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("JoinByStrategy1_args(");
      bool __first = true;
      if (Datas != null && __isset.Datas) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Datas: ");
        __sb.Append(Datas);
      }
      if (__isset.ThresholdK) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ThresholdK: ");
        __sb.Append(ThresholdK);
      }
      if (__isset.TimeOut) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeOut: ");
        __sb.Append(TimeOut);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class JoinByStrategy1_result : TBase
  {
    private List<int> _success;

    public List<int> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public JoinByStrategy1_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<int>();
                TList _list48 = iprot.ReadListBegin();
                for( int _i49 = 0; _i49 < _list48.Count; ++_i49)
                {
                  int _elem50;
                  _elem50 = iprot.ReadI32();
                  Success.Add(_elem50);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("JoinByStrategy1_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter51 in Success)
            {
              oprot.WriteI32(_iter51);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("JoinByStrategy1_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class JoinByStrategy2_args : TBase
  {
    private List<string> _Datas;
    private int _ThresholdK;
    private int _TimeOut;

    public List<string> Datas
    {
      get
      {
        return _Datas;
      }
      set
      {
        __isset.Datas = true;
        this._Datas = value;
      }
    }

    public int ThresholdK
    {
      get
      {
        return _ThresholdK;
      }
      set
      {
        __isset.ThresholdK = true;
        this._ThresholdK = value;
      }
    }

    public int TimeOut
    {
      get
      {
        return _TimeOut;
      }
      set
      {
        __isset.TimeOut = true;
        this._TimeOut = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Datas;
      public bool ThresholdK;
      public bool TimeOut;
    }

    public JoinByStrategy2_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Datas = new List<string>();
                TList _list52 = iprot.ReadListBegin();
                for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                {
                  string _elem54;
                  _elem54 = iprot.ReadString();
                  Datas.Add(_elem54);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ThresholdK = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TimeOut = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("JoinByStrategy2_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Datas != null && __isset.Datas) {
        field.Name = "Datas";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Datas.Count));
          foreach (string _iter55 in Datas)
          {
            oprot.WriteString(_iter55);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.ThresholdK) {
        field.Name = "ThresholdK";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ThresholdK);
        oprot.WriteFieldEnd();
      }
      if (__isset.TimeOut) {
        field.Name = "TimeOut";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TimeOut);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("JoinByStrategy2_args(");
      bool __first = true;
      if (Datas != null && __isset.Datas) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Datas: ");
        __sb.Append(Datas);
      }
      if (__isset.ThresholdK) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ThresholdK: ");
        __sb.Append(ThresholdK);
      }
      if (__isset.TimeOut) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeOut: ");
        __sb.Append(TimeOut);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class JoinByStrategy2_result : TBase
  {
    private List<int> _success;

    public List<int> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public JoinByStrategy2_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<int>();
                TList _list56 = iprot.ReadListBegin();
                for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                {
                  int _elem58;
                  _elem58 = iprot.ReadI32();
                  Success.Add(_elem58);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("JoinByStrategy2_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter59 in Success)
            {
              oprot.WriteI32(_iter59);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("JoinByStrategy2_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class JoinByStrategy3_args : TBase
  {
    private List<string> _Datas;
    private int _ThresholdK;
    private int _TimeOut;
    private double _SelfQueryR;

    public List<string> Datas
    {
      get
      {
        return _Datas;
      }
      set
      {
        __isset.Datas = true;
        this._Datas = value;
      }
    }

    public int ThresholdK
    {
      get
      {
        return _ThresholdK;
      }
      set
      {
        __isset.ThresholdK = true;
        this._ThresholdK = value;
      }
    }

    public int TimeOut
    {
      get
      {
        return _TimeOut;
      }
      set
      {
        __isset.TimeOut = true;
        this._TimeOut = value;
      }
    }

    public double SelfQueryR
    {
      get
      {
        return _SelfQueryR;
      }
      set
      {
        __isset.SelfQueryR = true;
        this._SelfQueryR = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Datas;
      public bool ThresholdK;
      public bool TimeOut;
      public bool SelfQueryR;
    }

    public JoinByStrategy3_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Datas = new List<string>();
                TList _list60 = iprot.ReadListBegin();
                for( int _i61 = 0; _i61 < _list60.Count; ++_i61)
                {
                  string _elem62;
                  _elem62 = iprot.ReadString();
                  Datas.Add(_elem62);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ThresholdK = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TimeOut = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              SelfQueryR = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("JoinByStrategy3_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Datas != null && __isset.Datas) {
        field.Name = "Datas";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Datas.Count));
          foreach (string _iter63 in Datas)
          {
            oprot.WriteString(_iter63);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.ThresholdK) {
        field.Name = "ThresholdK";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ThresholdK);
        oprot.WriteFieldEnd();
      }
      if (__isset.TimeOut) {
        field.Name = "TimeOut";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TimeOut);
        oprot.WriteFieldEnd();
      }
      if (__isset.SelfQueryR) {
        field.Name = "SelfQueryR";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(SelfQueryR);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("JoinByStrategy3_args(");
      bool __first = true;
      if (Datas != null && __isset.Datas) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Datas: ");
        __sb.Append(Datas);
      }
      if (__isset.ThresholdK) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ThresholdK: ");
        __sb.Append(ThresholdK);
      }
      if (__isset.TimeOut) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeOut: ");
        __sb.Append(TimeOut);
      }
      if (__isset.SelfQueryR) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SelfQueryR: ");
        __sb.Append(SelfQueryR);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class JoinByStrategy3_result : TBase
  {
    private List<int> _success;

    public List<int> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public JoinByStrategy3_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<int>();
                TList _list64 = iprot.ReadListBegin();
                for( int _i65 = 0; _i65 < _list64.Count; ++_i65)
                {
                  int _elem66;
                  _elem66 = iprot.ReadI32();
                  Success.Add(_elem66);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("JoinByStrategy3_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Success.Count));
            foreach (int _iter67 in Success)
            {
              oprot.WriteI32(_iter67);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("JoinByStrategy3_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
