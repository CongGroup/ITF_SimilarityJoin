/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SimilarityJoinService_H
#define SimilarityJoinService_H

#include <thrift/TDispatchProcessor.h>
#include "SimilarityJoin_types.h"



class SimilarityJoinServiceIf {
 public:
  virtual ~SimilarityJoinServiceIf() {}
  virtual void QueryDataByID(std::vector<std::string> & _return, const std::vector<int32_t> & UserIDs) = 0;
  virtual void QueryTypeByID(std::vector<std::string> & _return, const std::vector<int32_t> & UserIDs) = 0;
  virtual void QueryDistributedByID(std::vector<int32_t> & _return, const std::vector<int32_t> & UserIDs) = 0;
  virtual void QueryTypeByData(std::vector<std::string> & _return, const std::vector<std::string> & Datas) = 0;
  virtual void GetIndexDistributed(std::vector<int32_t> & _return) = 0;
  virtual void GetIndexMetaData(std::vector<std::string> & _return) = 0;
  virtual void JoinByStrategy1(std::vector<int32_t> & _return, const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut) = 0;
  virtual void JoinByStrategy2(std::vector<int32_t> & _return, const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut) = 0;
  virtual void JoinByStrategy3(std::vector<int32_t> & _return, const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut, const double SelfQueryR) = 0;
};

class SimilarityJoinServiceIfFactory {
 public:
  typedef SimilarityJoinServiceIf Handler;

  virtual ~SimilarityJoinServiceIfFactory() {}

  virtual SimilarityJoinServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SimilarityJoinServiceIf* /* handler */) = 0;
};

class SimilarityJoinServiceIfSingletonFactory : virtual public SimilarityJoinServiceIfFactory {
 public:
  SimilarityJoinServiceIfSingletonFactory(const boost::shared_ptr<SimilarityJoinServiceIf>& iface) : iface_(iface) {}
  virtual ~SimilarityJoinServiceIfSingletonFactory() {}

  virtual SimilarityJoinServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SimilarityJoinServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SimilarityJoinServiceIf> iface_;
};

class SimilarityJoinServiceNull : virtual public SimilarityJoinServiceIf {
 public:
  virtual ~SimilarityJoinServiceNull() {}
  void QueryDataByID(std::vector<std::string> & /* _return */, const std::vector<int32_t> & /* UserIDs */) {
    return;
  }
  void QueryTypeByID(std::vector<std::string> & /* _return */, const std::vector<int32_t> & /* UserIDs */) {
    return;
  }
  void QueryDistributedByID(std::vector<int32_t> & /* _return */, const std::vector<int32_t> & /* UserIDs */) {
    return;
  }
  void QueryTypeByData(std::vector<std::string> & /* _return */, const std::vector<std::string> & /* Datas */) {
    return;
  }
  void GetIndexDistributed(std::vector<int32_t> & /* _return */) {
    return;
  }
  void GetIndexMetaData(std::vector<std::string> & /* _return */) {
    return;
  }
  void JoinByStrategy1(std::vector<int32_t> & /* _return */, const std::vector<std::string> & /* Datas */, const int32_t /* ThresholdK */, const int32_t /* TimeOut */) {
    return;
  }
  void JoinByStrategy2(std::vector<int32_t> & /* _return */, const std::vector<std::string> & /* Datas */, const int32_t /* ThresholdK */, const int32_t /* TimeOut */) {
    return;
  }
  void JoinByStrategy3(std::vector<int32_t> & /* _return */, const std::vector<std::string> & /* Datas */, const int32_t /* ThresholdK */, const int32_t /* TimeOut */, const double /* SelfQueryR */) {
    return;
  }
};

typedef struct _SimilarityJoinService_QueryDataByID_args__isset {
  _SimilarityJoinService_QueryDataByID_args__isset() : UserIDs(false) {}
  bool UserIDs :1;
} _SimilarityJoinService_QueryDataByID_args__isset;

class SimilarityJoinService_QueryDataByID_args {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

  SimilarityJoinService_QueryDataByID_args(const SimilarityJoinService_QueryDataByID_args&);
  SimilarityJoinService_QueryDataByID_args& operator=(const SimilarityJoinService_QueryDataByID_args&);
  SimilarityJoinService_QueryDataByID_args() {
  }

  virtual ~SimilarityJoinService_QueryDataByID_args() throw();
  std::vector<int32_t>  UserIDs;

  _SimilarityJoinService_QueryDataByID_args__isset __isset;

  void __set_UserIDs(const std::vector<int32_t> & val);

  bool operator == (const SimilarityJoinService_QueryDataByID_args & rhs) const
  {
    if (!(UserIDs == rhs.UserIDs))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_QueryDataByID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_QueryDataByID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryDataByID_args& obj);
};


class SimilarityJoinService_QueryDataByID_pargs {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};


  virtual ~SimilarityJoinService_QueryDataByID_pargs() throw();
  const std::vector<int32_t> * UserIDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryDataByID_pargs& obj);
};

typedef struct _SimilarityJoinService_QueryDataByID_result__isset {
  _SimilarityJoinService_QueryDataByID_result__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_QueryDataByID_result__isset;

class SimilarityJoinService_QueryDataByID_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  SimilarityJoinService_QueryDataByID_result(const SimilarityJoinService_QueryDataByID_result&);
  SimilarityJoinService_QueryDataByID_result& operator=(const SimilarityJoinService_QueryDataByID_result&);
  SimilarityJoinService_QueryDataByID_result() {
  }

  virtual ~SimilarityJoinService_QueryDataByID_result() throw();
  std::vector<std::string>  success;

  _SimilarityJoinService_QueryDataByID_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const SimilarityJoinService_QueryDataByID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_QueryDataByID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_QueryDataByID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryDataByID_result& obj);
};

typedef struct _SimilarityJoinService_QueryDataByID_presult__isset {
  _SimilarityJoinService_QueryDataByID_presult__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_QueryDataByID_presult__isset;

class SimilarityJoinService_QueryDataByID_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~SimilarityJoinService_QueryDataByID_presult() throw();
  std::vector<std::string> * success;

  _SimilarityJoinService_QueryDataByID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryDataByID_presult& obj);
};

typedef struct _SimilarityJoinService_QueryTypeByID_args__isset {
  _SimilarityJoinService_QueryTypeByID_args__isset() : UserIDs(false) {}
  bool UserIDs :1;
} _SimilarityJoinService_QueryTypeByID_args__isset;

class SimilarityJoinService_QueryTypeByID_args {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

  SimilarityJoinService_QueryTypeByID_args(const SimilarityJoinService_QueryTypeByID_args&);
  SimilarityJoinService_QueryTypeByID_args& operator=(const SimilarityJoinService_QueryTypeByID_args&);
  SimilarityJoinService_QueryTypeByID_args() {
  }

  virtual ~SimilarityJoinService_QueryTypeByID_args() throw();
  std::vector<int32_t>  UserIDs;

  _SimilarityJoinService_QueryTypeByID_args__isset __isset;

  void __set_UserIDs(const std::vector<int32_t> & val);

  bool operator == (const SimilarityJoinService_QueryTypeByID_args & rhs) const
  {
    if (!(UserIDs == rhs.UserIDs))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_QueryTypeByID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_QueryTypeByID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryTypeByID_args& obj);
};


class SimilarityJoinService_QueryTypeByID_pargs {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};


  virtual ~SimilarityJoinService_QueryTypeByID_pargs() throw();
  const std::vector<int32_t> * UserIDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryTypeByID_pargs& obj);
};

typedef struct _SimilarityJoinService_QueryTypeByID_result__isset {
  _SimilarityJoinService_QueryTypeByID_result__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_QueryTypeByID_result__isset;

class SimilarityJoinService_QueryTypeByID_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  SimilarityJoinService_QueryTypeByID_result(const SimilarityJoinService_QueryTypeByID_result&);
  SimilarityJoinService_QueryTypeByID_result& operator=(const SimilarityJoinService_QueryTypeByID_result&);
  SimilarityJoinService_QueryTypeByID_result() {
  }

  virtual ~SimilarityJoinService_QueryTypeByID_result() throw();
  std::vector<std::string>  success;

  _SimilarityJoinService_QueryTypeByID_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const SimilarityJoinService_QueryTypeByID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_QueryTypeByID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_QueryTypeByID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryTypeByID_result& obj);
};

typedef struct _SimilarityJoinService_QueryTypeByID_presult__isset {
  _SimilarityJoinService_QueryTypeByID_presult__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_QueryTypeByID_presult__isset;

class SimilarityJoinService_QueryTypeByID_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~SimilarityJoinService_QueryTypeByID_presult() throw();
  std::vector<std::string> * success;

  _SimilarityJoinService_QueryTypeByID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryTypeByID_presult& obj);
};

typedef struct _SimilarityJoinService_QueryDistributedByID_args__isset {
  _SimilarityJoinService_QueryDistributedByID_args__isset() : UserIDs(false) {}
  bool UserIDs :1;
} _SimilarityJoinService_QueryDistributedByID_args__isset;

class SimilarityJoinService_QueryDistributedByID_args {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

  SimilarityJoinService_QueryDistributedByID_args(const SimilarityJoinService_QueryDistributedByID_args&);
  SimilarityJoinService_QueryDistributedByID_args& operator=(const SimilarityJoinService_QueryDistributedByID_args&);
  SimilarityJoinService_QueryDistributedByID_args() {
  }

  virtual ~SimilarityJoinService_QueryDistributedByID_args() throw();
  std::vector<int32_t>  UserIDs;

  _SimilarityJoinService_QueryDistributedByID_args__isset __isset;

  void __set_UserIDs(const std::vector<int32_t> & val);

  bool operator == (const SimilarityJoinService_QueryDistributedByID_args & rhs) const
  {
    if (!(UserIDs == rhs.UserIDs))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_QueryDistributedByID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_QueryDistributedByID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryDistributedByID_args& obj);
};


class SimilarityJoinService_QueryDistributedByID_pargs {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};


  virtual ~SimilarityJoinService_QueryDistributedByID_pargs() throw();
  const std::vector<int32_t> * UserIDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryDistributedByID_pargs& obj);
};

typedef struct _SimilarityJoinService_QueryDistributedByID_result__isset {
  _SimilarityJoinService_QueryDistributedByID_result__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_QueryDistributedByID_result__isset;

class SimilarityJoinService_QueryDistributedByID_result {
 public:

  static const char* ascii_fingerprint; // = "15EE8E87689CF0492C2E83D8C35B42B0";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xEE,0x8E,0x87,0x68,0x9C,0xF0,0x49,0x2C,0x2E,0x83,0xD8,0xC3,0x5B,0x42,0xB0};

  SimilarityJoinService_QueryDistributedByID_result(const SimilarityJoinService_QueryDistributedByID_result&);
  SimilarityJoinService_QueryDistributedByID_result& operator=(const SimilarityJoinService_QueryDistributedByID_result&);
  SimilarityJoinService_QueryDistributedByID_result() {
  }

  virtual ~SimilarityJoinService_QueryDistributedByID_result() throw();
  std::vector<int32_t>  success;

  _SimilarityJoinService_QueryDistributedByID_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const SimilarityJoinService_QueryDistributedByID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_QueryDistributedByID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_QueryDistributedByID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryDistributedByID_result& obj);
};

typedef struct _SimilarityJoinService_QueryDistributedByID_presult__isset {
  _SimilarityJoinService_QueryDistributedByID_presult__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_QueryDistributedByID_presult__isset;

class SimilarityJoinService_QueryDistributedByID_presult {
 public:

  static const char* ascii_fingerprint; // = "15EE8E87689CF0492C2E83D8C35B42B0";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xEE,0x8E,0x87,0x68,0x9C,0xF0,0x49,0x2C,0x2E,0x83,0xD8,0xC3,0x5B,0x42,0xB0};


  virtual ~SimilarityJoinService_QueryDistributedByID_presult() throw();
  std::vector<int32_t> * success;

  _SimilarityJoinService_QueryDistributedByID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryDistributedByID_presult& obj);
};

typedef struct _SimilarityJoinService_QueryTypeByData_args__isset {
  _SimilarityJoinService_QueryTypeByData_args__isset() : Datas(false) {}
  bool Datas :1;
} _SimilarityJoinService_QueryTypeByData_args__isset;

class SimilarityJoinService_QueryTypeByData_args {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  SimilarityJoinService_QueryTypeByData_args(const SimilarityJoinService_QueryTypeByData_args&);
  SimilarityJoinService_QueryTypeByData_args& operator=(const SimilarityJoinService_QueryTypeByData_args&);
  SimilarityJoinService_QueryTypeByData_args() {
  }

  virtual ~SimilarityJoinService_QueryTypeByData_args() throw();
  std::vector<std::string>  Datas;

  _SimilarityJoinService_QueryTypeByData_args__isset __isset;

  void __set_Datas(const std::vector<std::string> & val);

  bool operator == (const SimilarityJoinService_QueryTypeByData_args & rhs) const
  {
    if (!(Datas == rhs.Datas))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_QueryTypeByData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_QueryTypeByData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryTypeByData_args& obj);
};


class SimilarityJoinService_QueryTypeByData_pargs {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};


  virtual ~SimilarityJoinService_QueryTypeByData_pargs() throw();
  const std::vector<std::string> * Datas;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryTypeByData_pargs& obj);
};

typedef struct _SimilarityJoinService_QueryTypeByData_result__isset {
  _SimilarityJoinService_QueryTypeByData_result__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_QueryTypeByData_result__isset;

class SimilarityJoinService_QueryTypeByData_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  SimilarityJoinService_QueryTypeByData_result(const SimilarityJoinService_QueryTypeByData_result&);
  SimilarityJoinService_QueryTypeByData_result& operator=(const SimilarityJoinService_QueryTypeByData_result&);
  SimilarityJoinService_QueryTypeByData_result() {
  }

  virtual ~SimilarityJoinService_QueryTypeByData_result() throw();
  std::vector<std::string>  success;

  _SimilarityJoinService_QueryTypeByData_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const SimilarityJoinService_QueryTypeByData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_QueryTypeByData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_QueryTypeByData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryTypeByData_result& obj);
};

typedef struct _SimilarityJoinService_QueryTypeByData_presult__isset {
  _SimilarityJoinService_QueryTypeByData_presult__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_QueryTypeByData_presult__isset;

class SimilarityJoinService_QueryTypeByData_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~SimilarityJoinService_QueryTypeByData_presult() throw();
  std::vector<std::string> * success;

  _SimilarityJoinService_QueryTypeByData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_QueryTypeByData_presult& obj);
};


class SimilarityJoinService_GetIndexDistributed_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SimilarityJoinService_GetIndexDistributed_args(const SimilarityJoinService_GetIndexDistributed_args&);
  SimilarityJoinService_GetIndexDistributed_args& operator=(const SimilarityJoinService_GetIndexDistributed_args&);
  SimilarityJoinService_GetIndexDistributed_args() {
  }

  virtual ~SimilarityJoinService_GetIndexDistributed_args() throw();

  bool operator == (const SimilarityJoinService_GetIndexDistributed_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SimilarityJoinService_GetIndexDistributed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_GetIndexDistributed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_GetIndexDistributed_args& obj);
};


class SimilarityJoinService_GetIndexDistributed_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SimilarityJoinService_GetIndexDistributed_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_GetIndexDistributed_pargs& obj);
};

typedef struct _SimilarityJoinService_GetIndexDistributed_result__isset {
  _SimilarityJoinService_GetIndexDistributed_result__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_GetIndexDistributed_result__isset;

class SimilarityJoinService_GetIndexDistributed_result {
 public:

  static const char* ascii_fingerprint; // = "15EE8E87689CF0492C2E83D8C35B42B0";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xEE,0x8E,0x87,0x68,0x9C,0xF0,0x49,0x2C,0x2E,0x83,0xD8,0xC3,0x5B,0x42,0xB0};

  SimilarityJoinService_GetIndexDistributed_result(const SimilarityJoinService_GetIndexDistributed_result&);
  SimilarityJoinService_GetIndexDistributed_result& operator=(const SimilarityJoinService_GetIndexDistributed_result&);
  SimilarityJoinService_GetIndexDistributed_result() {
  }

  virtual ~SimilarityJoinService_GetIndexDistributed_result() throw();
  std::vector<int32_t>  success;

  _SimilarityJoinService_GetIndexDistributed_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const SimilarityJoinService_GetIndexDistributed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_GetIndexDistributed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_GetIndexDistributed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_GetIndexDistributed_result& obj);
};

typedef struct _SimilarityJoinService_GetIndexDistributed_presult__isset {
  _SimilarityJoinService_GetIndexDistributed_presult__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_GetIndexDistributed_presult__isset;

class SimilarityJoinService_GetIndexDistributed_presult {
 public:

  static const char* ascii_fingerprint; // = "15EE8E87689CF0492C2E83D8C35B42B0";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xEE,0x8E,0x87,0x68,0x9C,0xF0,0x49,0x2C,0x2E,0x83,0xD8,0xC3,0x5B,0x42,0xB0};


  virtual ~SimilarityJoinService_GetIndexDistributed_presult() throw();
  std::vector<int32_t> * success;

  _SimilarityJoinService_GetIndexDistributed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_GetIndexDistributed_presult& obj);
};


class SimilarityJoinService_GetIndexMetaData_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SimilarityJoinService_GetIndexMetaData_args(const SimilarityJoinService_GetIndexMetaData_args&);
  SimilarityJoinService_GetIndexMetaData_args& operator=(const SimilarityJoinService_GetIndexMetaData_args&);
  SimilarityJoinService_GetIndexMetaData_args() {
  }

  virtual ~SimilarityJoinService_GetIndexMetaData_args() throw();

  bool operator == (const SimilarityJoinService_GetIndexMetaData_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SimilarityJoinService_GetIndexMetaData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_GetIndexMetaData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_GetIndexMetaData_args& obj);
};


class SimilarityJoinService_GetIndexMetaData_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SimilarityJoinService_GetIndexMetaData_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_GetIndexMetaData_pargs& obj);
};

typedef struct _SimilarityJoinService_GetIndexMetaData_result__isset {
  _SimilarityJoinService_GetIndexMetaData_result__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_GetIndexMetaData_result__isset;

class SimilarityJoinService_GetIndexMetaData_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  SimilarityJoinService_GetIndexMetaData_result(const SimilarityJoinService_GetIndexMetaData_result&);
  SimilarityJoinService_GetIndexMetaData_result& operator=(const SimilarityJoinService_GetIndexMetaData_result&);
  SimilarityJoinService_GetIndexMetaData_result() {
  }

  virtual ~SimilarityJoinService_GetIndexMetaData_result() throw();
  std::vector<std::string>  success;

  _SimilarityJoinService_GetIndexMetaData_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const SimilarityJoinService_GetIndexMetaData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_GetIndexMetaData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_GetIndexMetaData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_GetIndexMetaData_result& obj);
};

typedef struct _SimilarityJoinService_GetIndexMetaData_presult__isset {
  _SimilarityJoinService_GetIndexMetaData_presult__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_GetIndexMetaData_presult__isset;

class SimilarityJoinService_GetIndexMetaData_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~SimilarityJoinService_GetIndexMetaData_presult() throw();
  std::vector<std::string> * success;

  _SimilarityJoinService_GetIndexMetaData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_GetIndexMetaData_presult& obj);
};

typedef struct _SimilarityJoinService_JoinByStrategy1_args__isset {
  _SimilarityJoinService_JoinByStrategy1_args__isset() : Datas(false), ThresholdK(false), TimeOut(false) {}
  bool Datas :1;
  bool ThresholdK :1;
  bool TimeOut :1;
} _SimilarityJoinService_JoinByStrategy1_args__isset;

class SimilarityJoinService_JoinByStrategy1_args {
 public:

  static const char* ascii_fingerprint; // = "9B7CA1247C79AE051C9FCBD06A537427";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x7C,0xA1,0x24,0x7C,0x79,0xAE,0x05,0x1C,0x9F,0xCB,0xD0,0x6A,0x53,0x74,0x27};

  SimilarityJoinService_JoinByStrategy1_args(const SimilarityJoinService_JoinByStrategy1_args&);
  SimilarityJoinService_JoinByStrategy1_args& operator=(const SimilarityJoinService_JoinByStrategy1_args&);
  SimilarityJoinService_JoinByStrategy1_args() : ThresholdK(0), TimeOut(0) {
  }

  virtual ~SimilarityJoinService_JoinByStrategy1_args() throw();
  std::vector<std::string>  Datas;
  int32_t ThresholdK;
  int32_t TimeOut;

  _SimilarityJoinService_JoinByStrategy1_args__isset __isset;

  void __set_Datas(const std::vector<std::string> & val);

  void __set_ThresholdK(const int32_t val);

  void __set_TimeOut(const int32_t val);

  bool operator == (const SimilarityJoinService_JoinByStrategy1_args & rhs) const
  {
    if (!(Datas == rhs.Datas))
      return false;
    if (!(ThresholdK == rhs.ThresholdK))
      return false;
    if (!(TimeOut == rhs.TimeOut))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_JoinByStrategy1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_JoinByStrategy1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy1_args& obj);
};


class SimilarityJoinService_JoinByStrategy1_pargs {
 public:

  static const char* ascii_fingerprint; // = "9B7CA1247C79AE051C9FCBD06A537427";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x7C,0xA1,0x24,0x7C,0x79,0xAE,0x05,0x1C,0x9F,0xCB,0xD0,0x6A,0x53,0x74,0x27};


  virtual ~SimilarityJoinService_JoinByStrategy1_pargs() throw();
  const std::vector<std::string> * Datas;
  const int32_t* ThresholdK;
  const int32_t* TimeOut;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy1_pargs& obj);
};

typedef struct _SimilarityJoinService_JoinByStrategy1_result__isset {
  _SimilarityJoinService_JoinByStrategy1_result__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_JoinByStrategy1_result__isset;

class SimilarityJoinService_JoinByStrategy1_result {
 public:

  static const char* ascii_fingerprint; // = "15EE8E87689CF0492C2E83D8C35B42B0";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xEE,0x8E,0x87,0x68,0x9C,0xF0,0x49,0x2C,0x2E,0x83,0xD8,0xC3,0x5B,0x42,0xB0};

  SimilarityJoinService_JoinByStrategy1_result(const SimilarityJoinService_JoinByStrategy1_result&);
  SimilarityJoinService_JoinByStrategy1_result& operator=(const SimilarityJoinService_JoinByStrategy1_result&);
  SimilarityJoinService_JoinByStrategy1_result() {
  }

  virtual ~SimilarityJoinService_JoinByStrategy1_result() throw();
  std::vector<int32_t>  success;

  _SimilarityJoinService_JoinByStrategy1_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const SimilarityJoinService_JoinByStrategy1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_JoinByStrategy1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_JoinByStrategy1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy1_result& obj);
};

typedef struct _SimilarityJoinService_JoinByStrategy1_presult__isset {
  _SimilarityJoinService_JoinByStrategy1_presult__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_JoinByStrategy1_presult__isset;

class SimilarityJoinService_JoinByStrategy1_presult {
 public:

  static const char* ascii_fingerprint; // = "15EE8E87689CF0492C2E83D8C35B42B0";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xEE,0x8E,0x87,0x68,0x9C,0xF0,0x49,0x2C,0x2E,0x83,0xD8,0xC3,0x5B,0x42,0xB0};


  virtual ~SimilarityJoinService_JoinByStrategy1_presult() throw();
  std::vector<int32_t> * success;

  _SimilarityJoinService_JoinByStrategy1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy1_presult& obj);
};

typedef struct _SimilarityJoinService_JoinByStrategy2_args__isset {
  _SimilarityJoinService_JoinByStrategy2_args__isset() : Datas(false), ThresholdK(false), TimeOut(false) {}
  bool Datas :1;
  bool ThresholdK :1;
  bool TimeOut :1;
} _SimilarityJoinService_JoinByStrategy2_args__isset;

class SimilarityJoinService_JoinByStrategy2_args {
 public:

  static const char* ascii_fingerprint; // = "9B7CA1247C79AE051C9FCBD06A537427";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x7C,0xA1,0x24,0x7C,0x79,0xAE,0x05,0x1C,0x9F,0xCB,0xD0,0x6A,0x53,0x74,0x27};

  SimilarityJoinService_JoinByStrategy2_args(const SimilarityJoinService_JoinByStrategy2_args&);
  SimilarityJoinService_JoinByStrategy2_args& operator=(const SimilarityJoinService_JoinByStrategy2_args&);
  SimilarityJoinService_JoinByStrategy2_args() : ThresholdK(0), TimeOut(0) {
  }

  virtual ~SimilarityJoinService_JoinByStrategy2_args() throw();
  std::vector<std::string>  Datas;
  int32_t ThresholdK;
  int32_t TimeOut;

  _SimilarityJoinService_JoinByStrategy2_args__isset __isset;

  void __set_Datas(const std::vector<std::string> & val);

  void __set_ThresholdK(const int32_t val);

  void __set_TimeOut(const int32_t val);

  bool operator == (const SimilarityJoinService_JoinByStrategy2_args & rhs) const
  {
    if (!(Datas == rhs.Datas))
      return false;
    if (!(ThresholdK == rhs.ThresholdK))
      return false;
    if (!(TimeOut == rhs.TimeOut))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_JoinByStrategy2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_JoinByStrategy2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy2_args& obj);
};


class SimilarityJoinService_JoinByStrategy2_pargs {
 public:

  static const char* ascii_fingerprint; // = "9B7CA1247C79AE051C9FCBD06A537427";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x7C,0xA1,0x24,0x7C,0x79,0xAE,0x05,0x1C,0x9F,0xCB,0xD0,0x6A,0x53,0x74,0x27};


  virtual ~SimilarityJoinService_JoinByStrategy2_pargs() throw();
  const std::vector<std::string> * Datas;
  const int32_t* ThresholdK;
  const int32_t* TimeOut;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy2_pargs& obj);
};

typedef struct _SimilarityJoinService_JoinByStrategy2_result__isset {
  _SimilarityJoinService_JoinByStrategy2_result__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_JoinByStrategy2_result__isset;

class SimilarityJoinService_JoinByStrategy2_result {
 public:

  static const char* ascii_fingerprint; // = "15EE8E87689CF0492C2E83D8C35B42B0";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xEE,0x8E,0x87,0x68,0x9C,0xF0,0x49,0x2C,0x2E,0x83,0xD8,0xC3,0x5B,0x42,0xB0};

  SimilarityJoinService_JoinByStrategy2_result(const SimilarityJoinService_JoinByStrategy2_result&);
  SimilarityJoinService_JoinByStrategy2_result& operator=(const SimilarityJoinService_JoinByStrategy2_result&);
  SimilarityJoinService_JoinByStrategy2_result() {
  }

  virtual ~SimilarityJoinService_JoinByStrategy2_result() throw();
  std::vector<int32_t>  success;

  _SimilarityJoinService_JoinByStrategy2_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const SimilarityJoinService_JoinByStrategy2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_JoinByStrategy2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_JoinByStrategy2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy2_result& obj);
};

typedef struct _SimilarityJoinService_JoinByStrategy2_presult__isset {
  _SimilarityJoinService_JoinByStrategy2_presult__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_JoinByStrategy2_presult__isset;

class SimilarityJoinService_JoinByStrategy2_presult {
 public:

  static const char* ascii_fingerprint; // = "15EE8E87689CF0492C2E83D8C35B42B0";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xEE,0x8E,0x87,0x68,0x9C,0xF0,0x49,0x2C,0x2E,0x83,0xD8,0xC3,0x5B,0x42,0xB0};


  virtual ~SimilarityJoinService_JoinByStrategy2_presult() throw();
  std::vector<int32_t> * success;

  _SimilarityJoinService_JoinByStrategy2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy2_presult& obj);
};

typedef struct _SimilarityJoinService_JoinByStrategy3_args__isset {
  _SimilarityJoinService_JoinByStrategy3_args__isset() : Datas(false), ThresholdK(false), TimeOut(false), SelfQueryR(false) {}
  bool Datas :1;
  bool ThresholdK :1;
  bool TimeOut :1;
  bool SelfQueryR :1;
} _SimilarityJoinService_JoinByStrategy3_args__isset;

class SimilarityJoinService_JoinByStrategy3_args {
 public:

  static const char* ascii_fingerprint; // = "E603E41736F5BE95B4D7DC5C6E12CA14";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0x03,0xE4,0x17,0x36,0xF5,0xBE,0x95,0xB4,0xD7,0xDC,0x5C,0x6E,0x12,0xCA,0x14};

  SimilarityJoinService_JoinByStrategy3_args(const SimilarityJoinService_JoinByStrategy3_args&);
  SimilarityJoinService_JoinByStrategy3_args& operator=(const SimilarityJoinService_JoinByStrategy3_args&);
  SimilarityJoinService_JoinByStrategy3_args() : ThresholdK(0), TimeOut(0), SelfQueryR(0) {
  }

  virtual ~SimilarityJoinService_JoinByStrategy3_args() throw();
  std::vector<std::string>  Datas;
  int32_t ThresholdK;
  int32_t TimeOut;
  double SelfQueryR;

  _SimilarityJoinService_JoinByStrategy3_args__isset __isset;

  void __set_Datas(const std::vector<std::string> & val);

  void __set_ThresholdK(const int32_t val);

  void __set_TimeOut(const int32_t val);

  void __set_SelfQueryR(const double val);

  bool operator == (const SimilarityJoinService_JoinByStrategy3_args & rhs) const
  {
    if (!(Datas == rhs.Datas))
      return false;
    if (!(ThresholdK == rhs.ThresholdK))
      return false;
    if (!(TimeOut == rhs.TimeOut))
      return false;
    if (!(SelfQueryR == rhs.SelfQueryR))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_JoinByStrategy3_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_JoinByStrategy3_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy3_args& obj);
};


class SimilarityJoinService_JoinByStrategy3_pargs {
 public:

  static const char* ascii_fingerprint; // = "E603E41736F5BE95B4D7DC5C6E12CA14";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0x03,0xE4,0x17,0x36,0xF5,0xBE,0x95,0xB4,0xD7,0xDC,0x5C,0x6E,0x12,0xCA,0x14};


  virtual ~SimilarityJoinService_JoinByStrategy3_pargs() throw();
  const std::vector<std::string> * Datas;
  const int32_t* ThresholdK;
  const int32_t* TimeOut;
  const double* SelfQueryR;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy3_pargs& obj);
};

typedef struct _SimilarityJoinService_JoinByStrategy3_result__isset {
  _SimilarityJoinService_JoinByStrategy3_result__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_JoinByStrategy3_result__isset;

class SimilarityJoinService_JoinByStrategy3_result {
 public:

  static const char* ascii_fingerprint; // = "15EE8E87689CF0492C2E83D8C35B42B0";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xEE,0x8E,0x87,0x68,0x9C,0xF0,0x49,0x2C,0x2E,0x83,0xD8,0xC3,0x5B,0x42,0xB0};

  SimilarityJoinService_JoinByStrategy3_result(const SimilarityJoinService_JoinByStrategy3_result&);
  SimilarityJoinService_JoinByStrategy3_result& operator=(const SimilarityJoinService_JoinByStrategy3_result&);
  SimilarityJoinService_JoinByStrategy3_result() {
  }

  virtual ~SimilarityJoinService_JoinByStrategy3_result() throw();
  std::vector<int32_t>  success;

  _SimilarityJoinService_JoinByStrategy3_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const SimilarityJoinService_JoinByStrategy3_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimilarityJoinService_JoinByStrategy3_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimilarityJoinService_JoinByStrategy3_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy3_result& obj);
};

typedef struct _SimilarityJoinService_JoinByStrategy3_presult__isset {
  _SimilarityJoinService_JoinByStrategy3_presult__isset() : success(false) {}
  bool success :1;
} _SimilarityJoinService_JoinByStrategy3_presult__isset;

class SimilarityJoinService_JoinByStrategy3_presult {
 public:

  static const char* ascii_fingerprint; // = "15EE8E87689CF0492C2E83D8C35B42B0";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xEE,0x8E,0x87,0x68,0x9C,0xF0,0x49,0x2C,0x2E,0x83,0xD8,0xC3,0x5B,0x42,0xB0};


  virtual ~SimilarityJoinService_JoinByStrategy3_presult() throw();
  std::vector<int32_t> * success;

  _SimilarityJoinService_JoinByStrategy3_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimilarityJoinService_JoinByStrategy3_presult& obj);
};

class SimilarityJoinServiceClient : virtual public SimilarityJoinServiceIf {
 public:
  SimilarityJoinServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SimilarityJoinServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void QueryDataByID(std::vector<std::string> & _return, const std::vector<int32_t> & UserIDs);
  void send_QueryDataByID(const std::vector<int32_t> & UserIDs);
  void recv_QueryDataByID(std::vector<std::string> & _return);
  void QueryTypeByID(std::vector<std::string> & _return, const std::vector<int32_t> & UserIDs);
  void send_QueryTypeByID(const std::vector<int32_t> & UserIDs);
  void recv_QueryTypeByID(std::vector<std::string> & _return);
  void QueryDistributedByID(std::vector<int32_t> & _return, const std::vector<int32_t> & UserIDs);
  void send_QueryDistributedByID(const std::vector<int32_t> & UserIDs);
  void recv_QueryDistributedByID(std::vector<int32_t> & _return);
  void QueryTypeByData(std::vector<std::string> & _return, const std::vector<std::string> & Datas);
  void send_QueryTypeByData(const std::vector<std::string> & Datas);
  void recv_QueryTypeByData(std::vector<std::string> & _return);
  void GetIndexDistributed(std::vector<int32_t> & _return);
  void send_GetIndexDistributed();
  void recv_GetIndexDistributed(std::vector<int32_t> & _return);
  void GetIndexMetaData(std::vector<std::string> & _return);
  void send_GetIndexMetaData();
  void recv_GetIndexMetaData(std::vector<std::string> & _return);
  void JoinByStrategy1(std::vector<int32_t> & _return, const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut);
  void send_JoinByStrategy1(const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut);
  void recv_JoinByStrategy1(std::vector<int32_t> & _return);
  void JoinByStrategy2(std::vector<int32_t> & _return, const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut);
  void send_JoinByStrategy2(const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut);
  void recv_JoinByStrategy2(std::vector<int32_t> & _return);
  void JoinByStrategy3(std::vector<int32_t> & _return, const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut, const double SelfQueryR);
  void send_JoinByStrategy3(const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut, const double SelfQueryR);
  void recv_JoinByStrategy3(std::vector<int32_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SimilarityJoinServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SimilarityJoinServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SimilarityJoinServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_QueryDataByID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryTypeByID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryDistributedByID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryTypeByData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetIndexDistributed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetIndexMetaData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_JoinByStrategy1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_JoinByStrategy2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_JoinByStrategy3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SimilarityJoinServiceProcessor(boost::shared_ptr<SimilarityJoinServiceIf> iface) :
    iface_(iface) {
    processMap_["QueryDataByID"] = &SimilarityJoinServiceProcessor::process_QueryDataByID;
    processMap_["QueryTypeByID"] = &SimilarityJoinServiceProcessor::process_QueryTypeByID;
    processMap_["QueryDistributedByID"] = &SimilarityJoinServiceProcessor::process_QueryDistributedByID;
    processMap_["QueryTypeByData"] = &SimilarityJoinServiceProcessor::process_QueryTypeByData;
    processMap_["GetIndexDistributed"] = &SimilarityJoinServiceProcessor::process_GetIndexDistributed;
    processMap_["GetIndexMetaData"] = &SimilarityJoinServiceProcessor::process_GetIndexMetaData;
    processMap_["JoinByStrategy1"] = &SimilarityJoinServiceProcessor::process_JoinByStrategy1;
    processMap_["JoinByStrategy2"] = &SimilarityJoinServiceProcessor::process_JoinByStrategy2;
    processMap_["JoinByStrategy3"] = &SimilarityJoinServiceProcessor::process_JoinByStrategy3;
  }

  virtual ~SimilarityJoinServiceProcessor() {}
};

class SimilarityJoinServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SimilarityJoinServiceProcessorFactory(const ::boost::shared_ptr< SimilarityJoinServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SimilarityJoinServiceIfFactory > handlerFactory_;
};

class SimilarityJoinServiceMultiface : virtual public SimilarityJoinServiceIf {
 public:
  SimilarityJoinServiceMultiface(std::vector<boost::shared_ptr<SimilarityJoinServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SimilarityJoinServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SimilarityJoinServiceIf> > ifaces_;
  SimilarityJoinServiceMultiface() {}
  void add(boost::shared_ptr<SimilarityJoinServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void QueryDataByID(std::vector<std::string> & _return, const std::vector<int32_t> & UserIDs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryDataByID(_return, UserIDs);
    }
    ifaces_[i]->QueryDataByID(_return, UserIDs);
    return;
  }

  void QueryTypeByID(std::vector<std::string> & _return, const std::vector<int32_t> & UserIDs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryTypeByID(_return, UserIDs);
    }
    ifaces_[i]->QueryTypeByID(_return, UserIDs);
    return;
  }

  void QueryDistributedByID(std::vector<int32_t> & _return, const std::vector<int32_t> & UserIDs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryDistributedByID(_return, UserIDs);
    }
    ifaces_[i]->QueryDistributedByID(_return, UserIDs);
    return;
  }

  void QueryTypeByData(std::vector<std::string> & _return, const std::vector<std::string> & Datas) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryTypeByData(_return, Datas);
    }
    ifaces_[i]->QueryTypeByData(_return, Datas);
    return;
  }

  void GetIndexDistributed(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetIndexDistributed(_return);
    }
    ifaces_[i]->GetIndexDistributed(_return);
    return;
  }

  void GetIndexMetaData(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetIndexMetaData(_return);
    }
    ifaces_[i]->GetIndexMetaData(_return);
    return;
  }

  void JoinByStrategy1(std::vector<int32_t> & _return, const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->JoinByStrategy1(_return, Datas, ThresholdK, TimeOut);
    }
    ifaces_[i]->JoinByStrategy1(_return, Datas, ThresholdK, TimeOut);
    return;
  }

  void JoinByStrategy2(std::vector<int32_t> & _return, const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->JoinByStrategy2(_return, Datas, ThresholdK, TimeOut);
    }
    ifaces_[i]->JoinByStrategy2(_return, Datas, ThresholdK, TimeOut);
    return;
  }

  void JoinByStrategy3(std::vector<int32_t> & _return, const std::vector<std::string> & Datas, const int32_t ThresholdK, const int32_t TimeOut, const double SelfQueryR) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->JoinByStrategy3(_return, Datas, ThresholdK, TimeOut, SelfQueryR);
    }
    ifaces_[i]->JoinByStrategy3(_return, Datas, ThresholdK, TimeOut, SelfQueryR);
    return;
  }

};



#endif
